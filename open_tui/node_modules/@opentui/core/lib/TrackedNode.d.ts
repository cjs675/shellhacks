import { type Config, type Node as YogaNode } from "yoga-layout";
import { EventEmitter } from "events";
interface NodeMetadata {
    [key: string]: any;
}
declare class TrackedNode<T extends NodeMetadata = NodeMetadata> extends EventEmitter {
    private static idCounter;
    id: number;
    yogaNode: YogaNode;
    metadata: T;
    parent: TrackedNode<any> | null;
    children: TrackedNode<any>[];
    protected _destroyed: boolean;
    protected _width: number | "auto" | `${number}%`;
    protected _height: number | "auto" | `${number}%`;
    constructor(yogaNode: YogaNode, metadata?: T);
    parseWidth(width: number | "auto" | `${number}%`): number | "auto";
    parseHeight(height: number | "auto" | `${number}%`): number | "auto";
    setWidth(width: number | "auto" | `${number}%`): void;
    setHeight(height: number | "auto" | `${number}%`): void;
    addChild<U extends NodeMetadata>(childNode: TrackedNode<U>): number;
    getChildIndex<U extends NodeMetadata>(childNode: TrackedNode<U>): number;
    removeChild<U extends NodeMetadata>(childNode: TrackedNode<U>): boolean;
    removeChildAtIndex(index: number): TrackedNode<any> | null;
    moveChild<U extends NodeMetadata>(childNode: TrackedNode<U>, newIndex: number): number;
    insertChild<U extends NodeMetadata>(childNode: TrackedNode<U>, index: number): number;
    getChildCount(): number;
    getChildAtIndex(index: number): TrackedNode<any> | null;
    setMetadata(key: keyof T, value: T[keyof T]): void;
    getMetadata<K extends keyof T>(key: K): T[K];
    removeMetadata<K extends keyof T>(key: K): void;
    hasChild<U extends NodeMetadata>(childNode: TrackedNode<U>): boolean;
    destroy(): void;
}
declare function createTrackedNode<T extends NodeMetadata>(metadata?: T, yogaConfig?: Config): TrackedNode<T>;
export { TrackedNode, createTrackedNode };
