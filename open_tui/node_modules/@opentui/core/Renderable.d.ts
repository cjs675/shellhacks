import { EventEmitter } from "events";
import { OptimizedBuffer } from "./buffer";
import { type KeyHandler } from "./lib/KeyHandler";
import { TrackedNode } from "./lib/TrackedNode";
import type { ParsedKey } from "./lib/parse.keypress";
import { type AlignString, type FlexDirectionString, type JustifyString, type OverflowString, type PositionTypeString, type WrapString } from "./lib/yoga.options";
import type { MouseEvent } from "./renderer";
import type { RenderContext } from "./types";
import { type VNode } from "./renderables/composition/vnode";
import type { Selection } from "./lib/selection";
declare const BrandedRenderable: unique symbol;
export declare enum LayoutEvents {
    LAYOUT_CHANGED = "layout-changed",
    ADDED = "added",
    REMOVED = "removed",
    RESIZED = "resized"
}
export declare enum RenderableEvents {
    FOCUSED = "focused",
    BLURRED = "blurred"
}
export interface Position {
    top?: number | "auto" | `${number}%`;
    right?: number | "auto" | `${number}%`;
    bottom?: number | "auto" | `${number}%`;
    left?: number | "auto" | `${number}%`;
}
export interface BaseRenderableOptions {
    id?: string;
}
export interface LayoutOptions extends BaseRenderableOptions {
    flexGrow?: number;
    flexShrink?: number;
    flexDirection?: FlexDirectionString;
    flexWrap?: WrapString;
    alignItems?: AlignString;
    justifyContent?: JustifyString;
    alignSelf?: AlignString;
    flexBasis?: number | "auto" | undefined;
    position?: PositionTypeString;
    overflow?: OverflowString;
    top?: number | "auto" | `${number}%`;
    right?: number | "auto" | `${number}%`;
    bottom?: number | "auto" | `${number}%`;
    left?: number | "auto" | `${number}%`;
    minWidth?: number | "auto" | `${number}%`;
    minHeight?: number | "auto" | `${number}%`;
    maxWidth?: number | "auto" | `${number}%`;
    maxHeight?: number | "auto" | `${number}%`;
    margin?: number | "auto" | `${number}%`;
    marginTop?: number | "auto" | `${number}%`;
    marginRight?: number | "auto" | `${number}%`;
    marginBottom?: number | "auto" | `${number}%`;
    marginLeft?: number | "auto" | `${number}%`;
    padding?: number | `${number}%`;
    paddingTop?: number | `${number}%`;
    paddingRight?: number | `${number}%`;
    paddingBottom?: number | `${number}%`;
    paddingLeft?: number | `${number}%`;
    enableLayout?: boolean;
}
export interface RenderableOptions<T extends BaseRenderable = BaseRenderable> extends Partial<LayoutOptions> {
    width?: number | "auto" | `${number}%`;
    height?: number | "auto" | `${number}%`;
    zIndex?: number;
    visible?: boolean;
    buffered?: boolean;
    live?: boolean;
    renderBefore?: (this: T, buffer: OptimizedBuffer, deltaTime: number) => void;
    renderAfter?: (this: T, buffer: OptimizedBuffer, deltaTime: number) => void;
    onMouse?: (this: T, event: MouseEvent) => void;
    onMouseDown?: (this: T, event: MouseEvent) => void;
    onMouseUp?: (this: T, event: MouseEvent) => void;
    onMouseMove?: (this: T, event: MouseEvent) => void;
    onMouseDrag?: (this: T, event: MouseEvent) => void;
    onMouseDragEnd?: (this: T, event: MouseEvent) => void;
    onMouseDrop?: (this: T, event: MouseEvent) => void;
    onMouseOver?: (this: T, event: MouseEvent) => void;
    onMouseOut?: (this: T, event: MouseEvent) => void;
    onMouseScroll?: (this: T, event: MouseEvent) => void;
    onKeyDown?: (key: ParsedKey) => void;
    onSizeChange?: (this: T) => void;
}
export declare function isValidPercentage(value: any): value is `${number}%`;
export declare function isMarginType(value: any): value is number | "auto" | `${number}%`;
export declare function isPaddingType(value: any): value is number | `${number}%`;
export declare function isPositionType(value: any): value is number | "auto" | `${number}%`;
export declare function isPositionTypeType(value: any): value is PositionTypeString;
export declare function isOverflowType(value: any): value is OverflowString;
export declare function isDimensionType(value: any): value is number | "auto" | `${number}%`;
export declare function isFlexBasisType(value: any): value is number | "auto" | undefined;
export declare function isSizeType(value: any): value is number | `${number}%` | undefined;
export declare function isRenderable(obj: any): obj is Renderable;
export declare abstract class BaseRenderable extends EventEmitter {
    [BrandedRenderable]: boolean;
    private static renderableNumber;
    readonly id: string;
    readonly num: number;
    protected _dirty: boolean;
    constructor(options: BaseRenderableOptions);
    abstract add(obj: BaseRenderable | unknown, index?: number): number;
    abstract remove(id: string): void;
    abstract getChildren(): BaseRenderable[];
    abstract getChildrenCount(): number;
    abstract getRenderable(id: string): BaseRenderable | undefined;
    abstract requestRender(): void;
    get isDirty(): boolean;
    protected markClean(): void;
    protected markDirty(): void;
}
export declare abstract class Renderable extends BaseRenderable {
    static renderablesByNumber: Map<number, Renderable>;
    private _isDestroyed;
    protected _ctx: RenderContext;
    protected _translateX: number;
    protected _translateY: number;
    protected _x: number;
    protected _y: number;
    protected _width: number | "auto" | `${number}%`;
    protected _height: number | "auto" | `${number}%`;
    protected _widthValue: number;
    protected _heightValue: number;
    private _zIndex;
    protected _visible: boolean;
    selectable: boolean;
    protected buffered: boolean;
    protected frameBuffer: OptimizedBuffer | null;
    protected _focusable: boolean;
    protected _focused: boolean;
    protected keyHandler: KeyHandler;
    protected keypressHandler: ((key: ParsedKey) => void) | null;
    private _live;
    protected _liveCount: number;
    private _sizeChangeListener;
    private _mouseListener;
    private _mouseListeners;
    private _keyListeners;
    protected layoutNode: TrackedNode;
    protected _positionType: PositionTypeString;
    protected _overflow: OverflowString;
    protected _position: Position;
    private renderableMap;
    protected renderableArray: Renderable[];
    private needsZIndexSort;
    parent: Renderable | null;
    private childrenPrimarySortDirty;
    private childrenSortedByPrimaryAxis;
    private _newChildren;
    renderBefore?: (this: Renderable, buffer: OptimizedBuffer, deltaTime: number) => void;
    renderAfter?: (this: Renderable, buffer: OptimizedBuffer, deltaTime: number) => void;
    constructor(ctx: RenderContext, options: RenderableOptions<any>);
    get focusable(): boolean;
    get ctx(): RenderContext;
    get visible(): boolean;
    get primaryAxis(): "row" | "column";
    set visible(value: boolean);
    hasSelection(): boolean;
    onSelectionChanged(selection: Selection | null): boolean;
    getSelectedText(): string;
    shouldStartSelection(x: number, y: number): boolean;
    focus(): void;
    blur(): void;
    get focused(): boolean;
    get live(): boolean;
    get liveCount(): number;
    set live(value: boolean);
    protected propagateLiveCount(delta: number): void;
    handleKeyPress?(key: ParsedKey | string): boolean;
    findDescendantById(id: string): Renderable | undefined;
    requestRender(): void;
    get translateX(): number;
    set translateX(value: number);
    get translateY(): number;
    set translateY(value: number);
    get x(): number;
    set x(value: number);
    get top(): number | "auto" | `${number}%` | undefined;
    set top(value: number | "auto" | `${number}%` | undefined);
    get right(): number | "auto" | `${number}%` | undefined;
    set right(value: number | "auto" | `${number}%` | undefined);
    get bottom(): number | "auto" | `${number}%` | undefined;
    set bottom(value: number | "auto" | `${number}%` | undefined);
    get left(): number | "auto" | `${number}%` | undefined;
    set left(value: number | "auto" | `${number}%` | undefined);
    get y(): number;
    set y(value: number);
    get width(): number;
    set width(value: number | "auto" | `${number}%`);
    get height(): number;
    set height(value: number | "auto" | `${number}%`);
    get zIndex(): number;
    set zIndex(value: number);
    private requestZIndexSort;
    private ensureZIndexSorted;
    getChildrenSortedByPrimaryAxis(): Renderable[];
    private setupYogaProperties;
    private setupMarginAndPadding;
    set position(positionType: PositionTypeString);
    get overflow(): OverflowString;
    set overflow(overflow: OverflowString);
    setPosition(position: Position): void;
    private updateYogaPosition;
    set flexGrow(grow: number);
    set flexShrink(shrink: number);
    set flexDirection(direction: FlexDirectionString);
    set flexWrap(wrap: WrapString);
    set alignItems(alignItems: AlignString);
    set justifyContent(justifyContent: JustifyString);
    set alignSelf(alignSelf: AlignString);
    set flexBasis(basis: number | "auto" | undefined);
    set minWidth(minWidth: number | `${number}%` | undefined);
    set maxWidth(maxWidth: number | `${number}%` | undefined);
    set minHeight(minHeight: number | `${number}%` | undefined);
    set maxHeight(maxHeight: number | `${number}%` | undefined);
    set margin(margin: number | "auto" | `${number}%` | undefined);
    set marginTop(margin: number | "auto" | `${number}%` | undefined);
    set marginRight(margin: number | "auto" | `${number}%` | undefined);
    set marginBottom(margin: number | "auto" | `${number}%` | undefined);
    set marginLeft(margin: number | "auto" | `${number}%` | undefined);
    set padding(padding: number | `${number}%` | undefined);
    set paddingTop(padding: number | `${number}%` | undefined);
    set paddingRight(padding: number | `${number}%` | undefined);
    set paddingBottom(padding: number | `${number}%` | undefined);
    set paddingLeft(padding: number | `${number}%` | undefined);
    getLayoutNode(): TrackedNode;
    updateFromLayout(): void;
    protected onLayoutResize(width: number, height: number): void;
    protected handleFrameBufferResize(width: number, height: number): void;
    protected createFrameBuffer(): void;
    protected onResize(width: number, height: number): void;
    private replaceParent;
    private _forceLayoutUpdateFor;
    add(obj: Renderable | VNode<any, any[]> | unknown, index?: number): number;
    insertBefore(obj: Renderable | VNode<any, any[]> | unknown, anchor?: Renderable | unknown): number;
    getRenderable(id: string): Renderable | undefined;
    remove(id: string): void;
    protected onRemove(): void;
    getChildren(): Renderable[];
    getChildrenCount(): number;
    updateLayout(deltaTime: number, renderList?: RenderCommand[]): void;
    render(buffer: OptimizedBuffer, deltaTime: number): void;
    protected _getChildren(): Renderable[];
    protected onUpdate(deltaTime: number): void;
    protected getScissorRect(): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    protected renderSelf(buffer: OptimizedBuffer, deltaTime: number): void;
    get isDestroyed(): boolean;
    destroy(): void;
    destroyRecursively(): void;
    protected destroySelf(): void;
    processMouseEvent(event: MouseEvent): void;
    protected onMouseEvent(event: MouseEvent): void;
    set onMouse(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseDown(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseUp(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseMove(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseDrag(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseDragEnd(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseDrop(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseOver(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseOut(handler: ((event: MouseEvent) => void) | undefined);
    set onMouseScroll(handler: ((event: MouseEvent) => void) | undefined);
    set onKeyDown(handler: ((key: ParsedKey) => void) | undefined);
    get onKeyDown(): ((key: ParsedKey) => void) | undefined;
    set onSizeChange(handler: (() => void) | undefined);
    get onSizeChange(): (() => void) | undefined;
    private applyEventOptions;
}
interface RenderCommandBase {
    action: "render" | "pushScissorRect" | "popScissorRect";
}
interface RenderCommandPushScissorRect extends RenderCommandBase {
    action: "pushScissorRect";
    x: number;
    y: number;
    width: number;
    height: number;
}
interface RenderCommandPopScissorRect extends RenderCommandBase {
    action: "popScissorRect";
}
interface RenderCommandRender extends RenderCommandBase {
    action: "render";
    renderable: Renderable;
}
export type RenderCommand = RenderCommandPushScissorRect | RenderCommandPopScissorRect | RenderCommandRender;
export declare class RootRenderable extends Renderable {
    private yogaConfig;
    private renderList;
    constructor(ctx: RenderContext);
    render(buffer: OptimizedBuffer, deltaTime: number): void;
    protected propagateLiveCount(delta: number): void;
    calculateLayout(): void;
    resize(width: number, height: number): void;
    protected onUpdate(deltaTime: number): void;
    protected destroySelf(): void;
}
export {};
