import { type ColorInput, OptimizedBuffer, Renderable, type RenderableOptions, type RenderContext, RGBA } from "../index";
export interface SliderOptions extends RenderableOptions<SliderRenderable> {
    orientation: "vertical" | "horizontal";
    thumbSize?: number;
    thumbPosition?: number;
    backgroundColor?: ColorInput;
    foregroundColor?: ColorInput;
    onChange?: (position: number) => void;
}
export declare class SliderRenderable extends Renderable {
    readonly orientation: "vertical" | "horizontal";
    private _thumbSize;
    private _thumbPosition;
    private _backgroundColor;
    private _foregroundColor;
    private _onChange?;
    constructor(ctx: RenderContext, options: SliderOptions);
    get thumbSize(): number;
    set thumbSize(value: number);
    get thumbPosition(): number;
    set thumbPosition(value: number);
    get backgroundColor(): RGBA;
    set backgroundColor(value: ColorInput);
    get foregroundColor(): RGBA;
    set foregroundColor(value: ColorInput);
    private setupMouseHandling;
    private updatePositionFromMouse;
    private getThumbPosition;
    private getThumbRect;
    protected renderSelf(buffer: OptimizedBuffer): void;
}
